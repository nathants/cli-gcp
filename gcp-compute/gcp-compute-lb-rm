#!/usr/bin/env python3
import time
import yaml
import shell
import logging
import googleapiclient.errors
import googleapiclient.discovery
import os
import argh
import cli_gcp
from util.retry import retry

def main(name,
         verbose=False,
         region=os.environ['GCP_REGION'],
         project=os.environ['GCP_PROJECT'],
         yes=False):
    lb_name = name
    zones = shell.run('gcp-zones --region', region, echo=False).splitlines()

    c = cli_gcp.compute()
    xs = [('firewall',              c.firewalls(),             {'project': project, 'firewall':         f'{lb_name}-firewall-allow-health-checks'}),
          ('http forwarding rule',  c.globalForwardingRules(), {'project': project, 'forwardingRule':   f'{lb_name}-http-forwarding-rules'}),
          ('https forwarding rule', c.globalForwardingRules(), {'project': project, 'forwardingRule':   f'{lb_name}-https-forwarding-rules'}),
          ('http proxy',            c.targetHttpProxies(),     {'project': project, 'targetHttpProxy':  f'{lb_name}-http-proxy'}),
          ('https proxy',           c.targetHttpsProxies(),    {'project': project, 'targetHttpsProxy': f'{lb_name}-https-proxy'}),
          ('global address',        c.globalAddresses(),       {'project': project, 'address':          f'{lb_name}-ip-address'}),
          ('ssl cert',              c.sslCertificates(),       {'project': project, 'sslCertificate':   f'{lb_name}-ssl-cert'}),
          ('url map',               c.urlMaps(),               {'project': project, 'urlMap':           f'{lb_name}-url-map'}),
          ('backend service',       c.backendServices(),       {'project': project, 'backendService':   f'{lb_name}-backend-service'})]
    for zone in zones:
        xs += [('autoscalers',            c.autoscalers(),           {'project': project, 'autoscaler':             f'{lb_name}-autoscaler', 'zone': zone}),
               ('instance group manager', c.instanceGroupManagers(), {'project': project, 'instanceGroupManager':   f'{lb_name}-instance-group-manager', 'zone': zone}),
               ('instance group manager', c.instanceGroupManagers(), {'project': project, 'instanceGroupManager':   f'{lb_name}-instance-group-manager', 'zone': zone})] # TODO why do we have to call delete twice for this?
    xs += [('instance template',        c.instanceTemplates(),  {'project': project, 'instanceTemplate': f'{lb_name}-instance-template'}),
           ('health check',             c.healthChecks(),       {'project': project, 'healthCheck':      f'{lb_name}-health-checks'})]

    address = None

    logging.info('going to delete:\n')
    for name, obj, kw in xs:
        try:
            res = obj.get(**kw).execute()
        except googleapiclient.errors.HttpError as e:
            if e.resp.status != 404:
                raise
        else:
            if name == 'global address':
                address = res
            if verbose:
                logging.info(yaml.dump({name: res}))
            else:
                logging.info(f'{res["name"]}')

    # lookup dns A records via ipv4, since a records don't have names or labels
    a_records = {}
    for zone in cli_gcp.dns_client().list_zones():
        for record in zone.list_resource_record_sets():
            a_records[record.rrdatas[0]] = (record, zone)
    ipv4_address = address['address']
    if ipv4_address in a_records:
        record, zone = a_records[ipv4_address]
        name = address['name'].replace('-ip-address', '-dns-a-record')
        if verbose:
            logging.info(yaml.dump({name: res}))
        else:
            logging.info(name)

    if not yes:
        logging.info('\nwould you like to proceed? y/n\n')
        assert shell.getch() == 'y', 'abort'

    for name, obj, kw in xs:
        try:
            res = retry(obj.delete(**kw).execute, times=20, exponent=1.5, allowed_exception_fn=lambda e: e.resp.status == 404)() # can't be deleted before upstream components actually gone
        except googleapiclient.errors.HttpError as e:
            if e.resp.status != 404:
                raise
            logging.info(f'already deleted: {name}')
        else:
            if verbose:
                logging.info(yaml.dump({name: res}))
            else:
                logging.info(f'deleted: {name}')

    # lookup dns A records via ipv4, since a records don't have names or labels
    ipv4_address = address['address']
    if ipv4_address in a_records:
        record, zone = a_records[ipv4_address]
        name = address['name'].replace('-ip-address', '-dns-a-record')
        changes = zone.changes()
        changes.delete_record_set(record)
        changes.create()
        while changes.status != 'done':
            logging.info('waiting for dns changes')
            time.sleep(5)
            changes.reload()
        if verbose:
            logging.info(f'{name} {ipv4_address} {record.name}')
        else:
            logging.info(f'deleted: {name}')

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
