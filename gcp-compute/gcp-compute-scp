#!/usr/bin/env python3
import itertools
import pool.thread
import logging
import sys
import shell
import os
import argh
import cli_gcp
import util.colors

def main(src,
         dst,
         *selectors,
         user='',
         yes=False,
         region=os.environ['GCP_REGION'],
         project=os.environ['GCP_PROJECT']):
    whoami = shell.run('whoami', echo=False)
    assert selectors, 'you must specify some selectors'
    zones = shell.run('gcp-zones --region', region, echo=False).splitlines()
    instances = []
    for zone in zones:
        instances += cli_gcp.ls(project, zone, selectors, 'running')
    assert instances, 'didnt find any instances'
    if not instances:
        sys.exit(1)
    else:
        for instance in instances:
            logging.info(cli_gcp.format(instance))
        if not yes:
            logging.info('\nwould you like to proceed? y/n\n')
            assert shell.getch() == 'y', 'abort'
        justify = max(len(cli_gcp.ip(i)) for i in instances)
        def run(instance, color):
            local_user = instance['labels']['local-user']
            if color:
                color = getattr(util.colors, color)
            else:
                color = lambda x: x
            name = (cli_gcp.ip(instance) + ': ').ljust(justify + 2)
            def fn():
                host = (user or whoami) + '@' + cli_gcp.ip(instance)
                _src = host + src if src.startswith(':') else src
                if ':' in _src:
                    remote, path = _src.split(':')
                    if not path.startswith('/'):
                        path = f'/home/{local_user}/{path}'
                    _src = f'{remote}:{path}'.rstrip('/')
                _dst = host + dst if dst.startswith(':') else dst
                if ':' in _dst:
                    remote, path = _dst.split(':')
                    if not path.startswith('/'):
                        path = f'/home/{local_user}/{path}'
                    _dst = f'{remote}:{path}'.rstrip('/')
                try:
                    try:
                        shell.run('scp', cli_gcp.ssh_args, _src, _dst, callback=lambda _, x: logging.info(color(name + x)))
                    except:
                        shell.run('gcp-compute-ssh', instance['id'], '-yc', f'"sudo chmod ugo+rw /home/{local_user}"')
                        shell.run('scp', cli_gcp.ssh_args, _src, _dst, callback=lambda _, x: logging.info(color(name + x)))
                except:
                    failures.append(util.colors.red('failure: ') + cli_gcp.ip(instance))
                else:
                    successes.append(util.colors.green('success: ') + cli_gcp.ip(instance))
            return fn
        failures = []
        successes = []
        pool.thread.wait(*map(run, instances, itertools.cycle(util.colors._colors) if len(instances) > 1 else [False]))
        logging.info('\nresults:')
        for msg in successes + failures:
            print(' ' + msg)
        if failures:
            sys.exit(1)

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
