#!/usr/bin/env python3
import sys
import shell
import uuid
import yaml
import json
import util.strings
import logging
import os
import argh
import cli_gcp
from util.retry import retry

_default_stop = 'echo goodbye'

_default_init = 'date > /tmp/cloudinit.log'

_nvme_init = """
# pick the first nvme drive which is NOT mounted as / and prepare that as /mnt
disk=$(sudo fdisk -l | grep ^Disk | grep nvme | awk '{print $2}' | tr -d : | sort -u | grep -v $(df / | grep /dev | awk '{print $1}' | head -c11) | head -n1)
(
 echo g # Create a new empty GPT partition table
 echo n # Add a new partition
 echo 1 # Partition number
 echo   # First sector (Accept default: 1)
 echo   # Last sector (Accept default: varies)
 echo w # Write changes
) | sudo fdisk $disk
sleep 2
sudo mkfs -t ext4 ${disk}p1
sudo mkdir -p /mnt
sudo mount -o discard ${disk}p1 /mnt
sudo chown -R $(whoami):$(whoami) /mnt
sudo chmod -R ugo+rw /mnt
sudo chmod -R ugo+rw /home/ubuntu || true
"""

_timeout_init = """
echo '# timeout will call this script before it `sudo poweroff`s, and wait 60 seconds for this script to complete' >> /tmp/timeout.sh
echo '
    warning="seconds remaining until timeout poweroff. tail -f /var/log/timeout.log to follow, increase /tmp/timeout.seconds to delay, or kill timeout.poweroff.sh to cancel."
    echo {} > /tmp/timeout.seconds
    # count down until timeout
    start=$(date +%s)
    while true; do
        now=$(date +%s)
        duration=$(($now - $start))
        timeout=$(cat /tmp/timeout.seconds)
        (($duration > $timeout)) && break
        remaining=$(($timeout - $duration))
        (($remaining <= 300)) && (($remaining % 60 == 0)) && wall "$remaining $warning"
        echo uptime seconds: $duration | sudo tee /var/log/timeout.log
        echo poweroff in seconds: $remaining | sudo tee -a /var/log/timeout.log
        sleep 1
    done
    # run timeout script and wait 60 seconds
    echo run: bash /tmp/timeout.sh > /var/log/timeout.log
    bash /tmp/timeout.sh &
    pid=$!
    start=$(date +%s)
    overtime=60
    while true; do
        ps $pid || break
        now=$(date +%s)
        duration=$(($now - $start))
        (($duration > $overtime)) && break
        remaining=$(($overtime - $duration))
        echo seconds until poweroff: $remaining > /var/log/timeout.log
        sleep 1
    done
    sudo poweroff
' > /tmp/timeout.poweroff.sh
bash /tmp/timeout.poweroff.sh &> /dev/null </dev/null &
disown %1
"""

def get_image(image, project):
    image_projects = {'ubuntu': 'ubuntu-os-cloud',
                      'arch': 'arch-linux-gce'}
    key = image.split('-')[0]
    image_project = image_projects.get(key, project)
    try:
        image_response = cli_gcp.compute().images().getFromFamily(project=image_project, family=image).execute()
        logging.info(f'using latest image for family {image}: {image_response["selfLink"].split("/")[-1]}')
    except:
        image_response = cli_gcp.compute().images().get(project=image_project, image=image).execute()
        logging.info(f'using image family {image}')
    return image_response['selfLink']

def gce_operation_log(res):
    trace_id = res['selfLink'].split('/')[-1]
    logger = cli_gcp.logging_client().logger('compute.googleapis.com%2Factivity_log')
    filter = f'jsonPayload.trace_id:{trace_id} AND jsonPayload.event_type:GCE_OPERATION_DONE'
    entries = list(logger.list_entries(filter_=filter))
    assert len(entries) == 1, f'expected 1 log entry for {trace_id}, got: {len(entries)}'
    return entries[0].payload

@argh.arg('--tag', action='append')
@argh.arg('--scope', action='append')
@argh.arg('-n', '--num')
@argh.arg('label', help='k=v pairs, may be specified multiple times')
def main(name,
         *label,
         scope: 'service account scope' = None,
         verbose = False,
         error_check: 'check logging for resource exhaustion and other errors' = False,
         tag: 'may be specified multiple times' = None,
         type=os.environ['GCP_COMPUTE_TYPE'],
         zone=os.environ['GCP_ZONE'],
         project=os.environ['GCP_PROJECT'],
         service_account='default',
         num: 'number of instances' = 1,
         image='ubuntu-1804-lts',
         ondemand=False,
         gigs=64,
         network_tier='STANDARD',
         init=_default_init,
         stop=_default_stop,
         local_ssd=False,
         seconds_timeout: (
             'will `sudo poweroff` after this many '
             'seconds. calls `bash /tmp/timeout.sh` '
             'if it exists and waits 60 seconds for '
             'it to exit before calling `sudo poweroff`. '
             'set to 0 to disable.') = 60 * 60,
         return_config_only=False):
    scopes = scope or []
    labels = label or []
    tags = tag or []
    if image == 'arch':
        local_user = 'root'
    else:
        local_user = 'ubuntu'
    logging.info(f'local_user: {local_user}')
    source_disk_image = get_image(image, project)
    machine_type = f"zones/{zone}/machineTypes/{type}"
    ssd_type = f"projects/{project}/zones/{zone}/diskTypes/local-ssd"
    # stop script
    if os.path.isfile(stop):
        logging.info(f'loading stop script from file: {stop}')
        with open(stop) as f:
            stop = f.read()
        if stop.startswith('#!'):
            assert stop.startswith('#!/bin/bash'), f'bad stop script: {stop[:50]}...'
            stop = '\n'.join(stop.split('\n')[1:])
    assert not stop.startswith('#!'), 'stop commands are bash snippets, and should not include a hashbang'
    stop = '#!/bin/bash\npath=/tmp/$(uuidgen); echo %s | base64 -d > $path; sudo -u %s bash -e $path 2>&1' % (util.strings.b64_encode(stop), local_user)
    # init script
    if os.path.isfile(init):
        logging.info(f'loading init script from file: {init}')
        with open(init) as f:
            init = f.read()
        if init.startswith('#!'):
            assert init.startswith('#!/bin/bash'), f'bad init script: {init[:50]}...'
            init = '\n'.join(init.split('\n')[1:])
    if local_ssd:
        init = _nvme_init + init
    if seconds_timeout:
        logging.info('this instance will `sudo poweroff` after %s seconds, or %s hours, because of --seconds-timeout', seconds_timeout, round(int(seconds_timeout) / 60. / 60., 1))
        init = _timeout_init.format(seconds_timeout) + init
    assert not init.startswith('#!'), 'init commands are bash snippets, and should not include a hashbang'
    init = '#!/bin/bash\npath=/tmp/$(uuidgen); echo %s | base64 -d > $path; sudo -u %s bash -e $path 2>&1' % (util.strings.b64_encode(init), local_user)
    disks = [{'boot': True,
              'autoDelete': True,
              'initializeParams': {'sourceImage': source_disk_image,
                                   'diskSizeGb': str(gigs)}}]
    if local_ssd:
        disks += [{'autoDelete': True,
                   'type': 'SCRATCH',
                   "interface": "NVME",
                   "initializeParams": {"diskType": ssd_type}}]
    for label in labels:
        assert ',' not in label, f'bad label, cannot contain comma: {label}'
        assert 1 == label.count('='), f'bad label, should be key=value, not: {label}'
    labels = dict(label.split('=') for label in labels)
    labels['name'] = name
    labels['local-user'] = local_user
    labels['owner'] = shell.run('whoami')
    config = {'name': f'{name}-{str(uuid.uuid4()).split("-")[0]}',
              'machineType': machine_type,
              'tags': {"items": tags},
              'scheduling': {'preemptible': not ondemand},
              'labels': labels,
              'disks': disks,
              'networkInterfaces': [{'network': 'global/networks/default',
                                     'accessConfigs': [{'type': 'ONE_TO_ONE_NAT',
                                                        'networkTier': network_tier,
                                                        'name': 'External NAT'}]}],
              'serviceAccounts': [{'email': service_account,
                                   'scopes': scopes}]}
    config['metadata'] = {'items': [{'key': 'startup-script', 'value': init},
                                    {'key': 'shutdown-script', 'value': stop}]}
    if return_config_only:
        print(json.dumps(config))
    else:
        ids = []
        for _ in range(num):
            config['name'] = f'{name}-{str(uuid.uuid4()).split("-")[0]}'
            if verbose:
                logging.info(yaml.dump({'config': config}))
            res = cli_gcp.compute().instances().insert(project=project, zone=zone, body=config).execute()
            if error_check: # why does this sometimes not work, there are no logs?
                entry = retry(gce_operation_log, exponent=1.1, times=20)(res)
                if 'error' in entry:
                    logging.info(yaml.dump(entry['error']))
                    sys.exit(1)
            if verbose:
                logging.info(yaml.dump({'result': res}))
            ids += [res['targetId']]
        return ids

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
