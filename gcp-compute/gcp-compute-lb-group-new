#!/usr/bin/env python3
import logging
import googleapiclient.errors
import json
import argh
import cli_gcp
import os
import shell
from util.retry import retry

@argh.arg('--scope', action='append')
def main(name,
         suffix='',
         service_account='default',
         port=8080,
         cooldown=30,
         utilization=0.65,
         zone=None,
         image=None,
         scope=None,
         verbose=False,
         ondemand=False,
         target_size=3,
         target_size_max=10,
         local_ssd=False,
         init='',
         stop='',
         project=os.environ['GCP_PROJECT']):
    lb_name = name
    assert suffix, 'you must specify --suffix'
    assert '-' not in suffix, f'suffix cannot container "-": {suffix}'
    assert image, 'you must specify --image'
    assert zone, 'you must specify --zone'
    if suffix:
        suffix = f'-{suffix}'
    if init:
        init = f'--init "{init}"'
    if stop:
        stop = f'--stop "{stop}"'
    scopes = [f'--scope {scope}' for scope in scope or []]
    firewall_network_tag = f'{lb_name}-allow-health-checks'
    instance_template_name = f'{lb_name}-instance-template-{zone}{suffix}'
    instance_config = json.loads(shell.run('gcp-compute-new',
                                           f'{lb_name}-instance-{zone}',
                                           '--seconds-timeout 0',
                                           '--image', image,
                                           '--return-config-only',
                                           f'--service-account {service_account}',
                                           *scopes,
                                           '--zone', zone,
                                           '--tag', firewall_network_tag,
                                           '--ondemand' if ondemand else '',
                                           '--local-ssd' if local_ssd else '',
                                           init,
                                           stop))
    instance_config['machineType'] = instance_config['machineType'].split('/')[-1]
    if instance_config.get('serviceAccounts'):
        instance_config['serviceAccounts'][0]['scopes'] = tuple(instance_config['serviceAccounts'][0].get('scopes', []))
    for disk in instance_config['disks']:
        if 'diskType' in disk['initializeParams']:
            disk['initializeParams']['diskType'] = disk['initializeParams']['diskType'].split('/')[-1]
    instance_template = cli_gcp.ensure.instance_template(verbose, project, instance_template_name, instance_config)

    health_check_name = f'{lb_name}-health-checks'
    get_health_check = cli_gcp.compute().healthChecks().get(project=project, healthCheck=health_check_name).execute
    get_health_check = retry(get_health_check, exponent=1.2, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) == 404)
    try:
        health_check = get_health_check()
    except googleapiclient.errors.HttpError as e:
        if getattr(getattr(e, "resp", None), "status", None) != 404:
            raise
        port = 8080
        health_check_http_path = '/health'
        health_check = cli_gcp.ensure.health_check(verbose, project, health_check_name, health_check_http_path, port)
        logging.info(f'created default health check: {health_check_name}')
    else:
        logging.info(f'using existing health check: {health_check_name}')

    instance_group_manager_name = f'{lb_name}-instance-group-manager-{zone}{suffix}'
    instance_name = f'{lb_name}-managed-instance-{zone}'
    instance_group_manager = cli_gcp.ensure.managed_instance_group(verbose, project, zone, instance_name, cli_gcp.url(health_check), target_size, target_size_max, cli_gcp.url(instance_template), cli_gcp.port_name, port, instance_group_manager_name)

    autoscaler_name = f'{lb_name}-autoscaler-{zone}{suffix}'
    cli_gcp.ensure.autoscaler(verbose, project, zone, autoscaler_name, cli_gcp.url(instance_group_manager), target_size, target_size_max, cooldown, utilization)

    firewall_rule_name = f'{lb_name}-firewall-allow-health-checks'
    get_firewall = cli_gcp.compute().firewalls().get(project=project, firewall=firewall_rule_name).execute
    get_firewall = retry(get_firewall, exponent=1.2, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) == 404)
    try:
        get_firewall()
    except googleapiclient.errors.HttpError as e:
        if getattr(getattr(e, "resp", None), "status", None) != 404:
            raise
        firewall_network_tag = f'{lb_name}-allow-health-checks'
        official_gcp_ips = ['35.191.0.0/16', '130.211.0.0/22']
        cli_gcp.ensure.firewall_allow(verbose, project, firewall_rule_name, official_gcp_ips, [firewall_network_tag], port)
        logging.info(f'created default firewall rule: {firewall_rule_name}')
    else:
        logging.info(f'using existing firewall rule: {firewall_rule_name}')


if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
