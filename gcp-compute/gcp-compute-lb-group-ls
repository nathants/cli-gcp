#!/usr/bin/env python3
import sys
import argh
import cli_gcp
import os
import shell
import googleapiclient.errors

@argh.arg('-r', '--removed')
def main(name,
         removed=False,
         verbose=False,
         suffix='',
         zone=None,
         no_instances: 'dont list instances' = False,
         instances_only: 'only list instances' = False,
         project=os.environ['GCP_PROJECT'],
         region=os.environ['GCP_REGION']):

    lb_name = name
    if zone:
        zones = [zone]
    else:
        zones = shell.run('gcp-zones --region', region, echo=False).splitlines()

    backend_service_name = f'{lb_name}-backend-service'
    try:
        backend_service = cli_gcp.compute().backendServices().get(project=project, backendService=backend_service_name).execute()
    except googleapiclient.errors.HttpError as e:
        if e.resp.status != 404:
            raise
        sys.exit(1)

    if removed and not suffix:
        groups = []
        for zone in zones:
            req = cli_gcp.compute().instanceGroupManagers().list(project=project, zone=zone)
            while req:
                resp = req.execute()
                for item in resp.get('items', []):
                    if item['name'].startswith(f'{lb_name}-'):
                        groups.append((zone, item))
                req = cli_gcp.compute().instanceGroupManagers().list_next(req, resp)
    else:
        groups = []
        for backend in backend_service.get('backends', []):
            *_, zone, _, group_name = backend['group'].split('/')
            if not suffix or group_name.split('-')[-1] == suffix:
                group = cli_gcp.compute().instanceGroupManagers().get(project=project, zone=zone, instanceGroupManager=group_name).execute()
                groups.append((zone, group))

    if not groups:
        sys.exit(1)

    backends = {b['group'].split('/')[-1] for b in backend_service.get('backends', [])}

    size = 0
    for zone, group in groups:
        size = max(size, len(group['name']))

    for zone, group in groups:
        added = group['name'] in backends
        if not instances_only:
            print(group['name'].ljust(size), group['creationTimestamp'], '[added]' if added else '[removed]')
        if not no_instances:
            req = cli_gcp.compute().instanceGroupManagers().listManagedInstances(project=project, zone=zone, instanceGroupManager=group['name'])
            while req:
                resp = req.execute()
                for item in resp.get('managedInstances', []):
                    health = item.get("instanceHealth", [{}])[0].get("detailedHealthState", "-")
                    print(f'  {item.get("id", "-")} {item.get("instanceStatus", "-")} {health}')
                req = cli_gcp.compute().instanceGroupManagers().list_next(req, resp)

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
