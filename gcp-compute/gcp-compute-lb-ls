#!/usr/bin/env python3
import argh
import cli_gcp
import os
import shell
import yaml

def main(name=None,
         verbose=False,
         project=os.environ['GCP_PROJECT'],
         region=os.environ['GCP_REGION'],):
    lb_name = name
    zones = shell.run('gcp-zones --region', region, echo=False).splitlines()

    c = cli_gcp.compute()

    xs = [
        ('instance templates',        c.instanceTemplates(),     [{}]),
        ('backend services',          c.backendServices(),       [{}]),
        ('autoscalers',               c.autoscalers(),           [{'zone': zone} for zone in zones]),
        ('instance group managers',   c.instanceGroupManagers(), [{'zone': zone} for zone in zones]),
        ('instance groups',           c.instanceGroups(),        [{'zone': zone} for zone in zones]),
        ('health checks',             c.healthChecks(),          [{}]),
        ('ssl certs',                 c.sslCertificates(),       [{}]),
        ('global forwarding rules',   c.globalForwardingRules(), [{}]),
        ('target http proxies',       c.targetHttpProxies(),     [{}]),
        ('target https proxies',      c.targetHttpsProxies(),    [{}]),
        ('url maps',                  c.urlMaps(),               [{}]),
        ('firewall allows',           c.urlMaps(),               [{}], lambda x: x['name'].endswith('-firewall-allow-lb-http')),
        ('global addresses',          c.globalAddresses(),       [{}]),
        # TODO this is how we can see healthy status of the pool
        # listManagedInstances(project=*, zone=*, instanceGroupManager=*, order_by=None, maxResults=None, pageToken=None, filter=None)
    ]

    for x in xs:
        try:
            name, obj, kws = x
        except ValueError:
            name, obj, kws, filter = x

        res = []
        for kw in kws:
            req = obj.list(project=project, **kw)
            while req:
                resp = req.execute()
                for item in resp.get('items', []):
                    if not lb_name or item['name'].startswith(f'{lb_name}-'):
                        res.append(item)
                req = obj.list_next(req, resp)
        if verbose:
            print(yaml.dump({name: res}).strip())
        else:
            for r in res:
                print(r['name'])

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
