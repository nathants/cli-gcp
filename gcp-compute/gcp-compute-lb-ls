#!/usr/bin/env python3
import argh
import cli_gcp
import os
import shell
import yaml

def main(project=os.environ['GCP_PROJECT'],
         region=os.environ['GCP_REGION'],):
    zones = shell.run('gcp-zones --region', region, echo=False).splitlines()
    # instance template
    instance_templates = []
    req = cli_gcp.compute().instanceTemplates().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            del item['properties']['metadata'] # too noisy for ls
            instance_templates.append(item)
        req = cli_gcp.compute().instanceTemplates().list_next(req, resp)
    print(yaml.dump({'instanceTemplates': instance_templates}))

    # backend service
    backend_services = []
    req = cli_gcp.compute().backendServices().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            backend_services.append(item)
        req = cli_gcp.compute().backendServices().list_next(req, resp)
    print(yaml.dump({'backendServices': backend_services}))

    # instance group manager
    instance_group_managers = []
    for zone in zones:
        req = cli_gcp.compute().instanceGroupManagers().list(project=project, zone=zone)
        while req:
            resp = req.execute()
            for item in resp.get('items', []):
                instance_group_managers.append(item)
            req = cli_gcp.compute().instanceGroupManagers().list_next(req, resp)
    print(yaml.dump({'instanceGroupManagers': instance_group_managers}))

    # instance group
    instance_groups = []
    for zone in zones:
        req = cli_gcp.compute().instanceGroups().list(project=project, zone=zone)
        while req:
            resp = req.execute()
            for item in resp.get('items', []):
                instance_groups.append(item)
            req = cli_gcp.compute().instanceGroups().list_next(req, resp)
    print(yaml.dump({'instanceGroups': instance_groups}))

    # health check
    health_checks = []
    req = cli_gcp.compute().healthChecks().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            health_checks.append(item)
        req = cli_gcp.compute().healthChecks().list_next(req, resp)
    print(yaml.dump({'healthChecks': health_checks}))

    # ssl certs
    ssl_certs = []
    req = cli_gcp.compute().sslCertificates().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            ssl_certs.append(item)
        req = cli_gcp.compute().sslCertificates().list_next(req, resp)
    print(yaml.dump({'sslCertificates': ssl_certs}))

    # global forwarding rules
    global_forwarding_rules = []
    req = cli_gcp.compute().globalForwardingRules().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            global_forwarding_rules.append(item)
        req = cli_gcp.compute().globalForwardingRules().list_next(req, resp)
    print(yaml.dump({'globalForwardingRules': global_forwarding_rules}))

    # target https proxies
    target_https_proxies = []
    req = cli_gcp.compute().targetHttpsProxies().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            target_https_proxies.append(item)
        req = cli_gcp.compute().targetHttpsProxies().list_next(req, resp)
    print(yaml.dump({'targetHttpsProxies': target_https_proxies}))

    # target http proxies
    target_http_proxies = []
    req = cli_gcp.compute().targetHttpProxies().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            target_http_proxies.append(item)
        req = cli_gcp.compute().targetHttpProxies().list_next(req, resp)
    print(yaml.dump({'targetHttpProxies': target_http_proxies}))

    # url maps
    url_maps = []
    req = cli_gcp.compute().urlMaps().list(project=project)
    while req:
        resp = req.execute()
        for item in resp.get('items', []):
            url_maps.append(item)
        req = cli_gcp.compute().urlMaps().list_next(req, resp)
    print(yaml.dump({'urlMaps': url_maps}))

    # TODO this is how we can see healthy status of the pool
    # listManagedInstances(project=*, zone=*, instanceGroupManager=*, order_by=None, maxResults=None, pageToken=None, filter=None)

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
