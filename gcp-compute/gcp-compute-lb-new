#!/usr/bin/env python3
import yaml
import shell
import json
import logging
import os
import argh
import cli_gcp

def main(name,
         project=os.environ['GCP_PROJECT'],
         region=os.environ['GCP_REGION'],
         zone=os.environ['GCP_ZONE'],
         timeout=30,
         balancing_mode='UTILIZATION',
         init='',
         port: 'http port on backend services' = 8080,
         target_size=3,
         target_size_max=10,
         verbose=False,
         health_check_http_path="/health"):

    instance_template_name = f'{name}-instance-template'
    if init:
        init = f'--init "{init}"'
    firewall_network_tag = f'{name}-allow-health-checks'
    instance_config = json.loads(shell.run('gcp-compute-new',
                                           f'{name}-instance',
                                           '--return-config-only',
                                           '--zone', zone,
                                           '--tag', firewall_network_tag,
                                           init))
    instance_config['machineType'] = instance_config['machineType'].split('/')[-1]
    for disk in instance_config['disks']:
        if 'diskType' in disk['initializeParams']:
            disk['initializeParams']['diskType'] = disk['initializeParams']['diskType'].split('/')[-1]
    instance_template = cli_gcp.ensure.instance_template(verbose, project, instance_template_name, instance_config)

    health_check_name = f'{name}-health-checks'
    health_check = cli_gcp.ensure.health_check(verbose, project, health_check_name, health_check_http_path, port)

    port_name = "http-port"

    instance_group_manager_name = f'{name}-instance-group-manager'
    instance_name = f'{name}-managed-instance'
    instance_group_manager = cli_gcp.ensure.managed_instance_group(verbose, project, zone, instance_name, cli_gcp.url(health_check), target_size, target_size_max, cli_gcp.url(instance_template), port_name, port, instance_group_manager_name)

    autoscaler_name = f'{name}-autoscaler'
    cli_gcp.ensure.autoscaler(verbose, project, zone, autoscaler_name, cli_gcp.url(instance_group_manager), target_size, target_size_max)

    backend_service_name = f'{name}-backend-service'
    backend_service = cli_gcp.ensure.backend_service(verbose, project, timeout, cli_gcp.url(health_check), port_name, backend_service_name)

    cli_gcp.ensure.backend_has_instance_group(verbose, project, zone, backend_service_name, instance_group_manager_name, balancing_mode, cli_gcp.url(health_check))

    url_map_name = f'{name}-url-map'
    url_map = cli_gcp.ensure.url_map(verbose, project, url_map_name, cli_gcp.url(backend_service))

    ip_address_name = f'{name}-ip-address'
    ip_address = cli_gcp.ensure.global_ip_address(verbose, project, ip_address_name)

    ssl_cert_name = f'{name}-ssl-cert'
    ssl_cert = cli_gcp.ensure.ssl_cert(verbose, project, ssl_cert_name, ip_address['address'])

    https_proxy_name = f'{name}-https-proxy'
    https_proxy = cli_gcp.ensure.https_proxy(verbose, project, https_proxy_name, cli_gcp.url(url_map), cli_gcp.url(ssl_cert))

    https_forwarding_rules_name = f'{name}-https-forwarding-rules'
    cli_gcp.ensure.global_forwarding_rules(verbose, project, https_forwarding_rules_name, cli_gcp.url(https_proxy), ip_address['address'], '443-443')

    http_proxy_name = f'{name}-http-proxy'
    http_proxy = cli_gcp.ensure.http_proxy(verbose, project, http_proxy_name, cli_gcp.url(url_map))

    http_forwarding_rules_name = f'{name}-http-forwarding-rules'
    cli_gcp.ensure.global_forwarding_rules(verbose, project, http_forwarding_rules_name, cli_gcp.url(http_proxy), ip_address['address'], '80-80')

    firewall_rule_name = f'{name}-firewall-allow-health-checks'
    official_gcp_ips = ['35.191.0.0/16', '130.211.0.0/22']
    cli_gcp.ensure.firewall_allow(verbose, project, firewall_rule_name, official_gcp_ips, [firewall_network_tag], port)

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
