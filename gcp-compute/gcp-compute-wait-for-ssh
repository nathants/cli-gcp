#!/usr/bin/env python3
import random
import time
import shell
import os
import argh
import cli_gcp
import logging

def main(*selectors,
         region=os.environ['GCP_REGION'],
         project=os.environ['GCP_PROJECT'],
         yes=False,
         seconds: 'after this many seconds, terminate any instances not ready and return the id of ready instances' = 0):
    assert selectors, 'you cannot wait for all things, specify some selectors'
    ids = shell.run('gcp-compute-wait-for-state -y', *selectors, stream=True).splitlines()
    instances = []
    zones = shell.run('gcp-zones --region', region, echo=False).splitlines()
    for zone in zones:
        instances += cli_gcp.ls(project, zone, ids, 'all')
    assert len(ids) == len(instances), f'didnt fetch all the instances: {[ids, [i["id"] for i in instances]]}'
    assert instances, 'didnt find any instances for those selectors'
    logging.info('going to wait for ssh on the following instances:')
    for i in instances:
        logging.info(' ' + cli_gcp.format(i))
    if not yes:
        logging.info('\nwould you like to proceed? y/n\n')
        assert shell.getch() == 'y', 'abort'
    logging.info('wait for ssh...')
    global_start = time.time()
    for i in range(200):
        running = []
        for zone in zones:
            running += cli_gcp.ls(project, zone, [i['id'] for i in instances], 'running')
        running_ids = ' '.join([i['id'] for i in running])
        local_start = time.time()
        try:
            res = shell.run(f'gcp-compute-ssh {running_ids} --batch-mode -t 10 -yc "whoami >/dev/null" 2>&1', warn=True, stream=i > 10)
            ready_ids = [x.split()[-1]
                         for x in res['stdout'].splitlines()
                         if x.startswith('success: ')]
            num_ready = len(ready_ids)
            num_not_ready = len(instances) - num_ready
            logging.info(f'waiting for {num_not_ready} nodes')
            if seconds and time.time() - global_start > seconds and num_not_ready:
                logging.info(f'waited for {seconds} seconds, {num_ready} ready, {num_not_ready} not ready and will be terminated')
                not_ready_ids = [i.instance_id
                                 for i in instances
                                 if i.instance_id not in set(ready_ids)]
                if not_ready_ids:
                    shell.check_call('gcp-compute-rm -y', *not_ready_ids)
                num_not_ready = 0
            if num_not_ready == 0:
                assert ready_ids, 'failed to wait for ssh: no instances'
                return ready_ids
        except KeyboardInterrupt:
            raise
        time.sleep(max(0, 5 - (time.time() - local_start)) + random.random())
    assert False, 'failed to wait for ssh'

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
