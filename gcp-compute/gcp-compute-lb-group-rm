#!/usr/bin/env python3
import yaml
import logging
import argh
import cli_gcp
import os
import shell
from util.retry import retry
import googleapiclient.errors

def main(name,
         zone=None,
         suffix='',
         verbose=False,
         project=os.environ['GCP_PROJECT'],
         yes=False):
    assert suffix, '--suffix must be specified'
    assert zone, '--zone must be specified'
    lb_name = name
    suffix = f'-{suffix}'

    group_name = f'{name}-instance-group-manager-{zone}{suffix}'
    scaler_name = f'{name}-autoscaler-{zone}{suffix}'
    template_name = f'{name}-instance-template-{zone}{suffix}'

    logging.info('going to delete the following:\n')

    logging.info(group_name)

    logging.info(scaler_name)

    logging.info(template_name)

    try:
        group = cli_gcp.compute().instanceGroupManagers().get(project=project, zone=zone, instanceGroupManager=group_name).execute()
    except googleapiclient.errors.HttpError as e:
        if getattr(getattr(e, "resp", None), "status", None) != 404:
            raise
        group = None
    else:
        logging.info(f"{group['name']} {group['creationTimestamp']}")
        req = cli_gcp.compute().instanceGroupManagers().listManagedInstances(project=project, zone=zone, instanceGroupManager=group['name'])
        while req:
            resp = req.execute()
            for item in resp.get('managedInstances', []):
                health = item["instanceHealth"][0]["detailedHealthState"]
                logging.info(f' {item.get("id")} {item.get("instanceStatus")} {health}')
            req = cli_gcp.compute().instanceGroupManagers().list_next(req, resp)

    if not yes:
        logging.info('\nwould you like to proceed? y/n\n')
        assert shell.getch() == 'y', 'abort'

    has_backend = False
    if group:
        backend_service_name = f'{lb_name}-backend-service'
        try:
            cli_gcp.ensure.backend_hasnt_instance_group(False, project, zone, backend_service_name, group['name'])
            has_backend = True
        except googleapiclient.errors.HttpError as e:
            if getattr(getattr(e, "resp", None), "status", None) != 404:
                raise

    # when creating a loadbalancer-less group, for simple autoscaling compute,
    # the group owns the health check and firewall, and should delete it unless
    # another group is still using it
    multiple_groups = len(shell.run(f'gcp-compute-lb-group-ls {lb_name} --no-instances --removed || true').splitlines()) > 1

    try:
        delete = cli_gcp.compute().autoscalers().delete(project=project, zone=zone, autoscaler=scaler_name).execute
        res = retry(delete, times=20, exponent=1.5, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) == 404)()
    except googleapiclient.errors.HttpError as e:
        if getattr(getattr(e, "resp", None), "status", None) != 404:
            raise
        logging.info(f'already deleted: {scaler_name}')
    else:
        if verbose:
            logging.info(yaml.dump({scaler_name: res}))
        else:
            logging.info(f'deleted: {scaler_name}')

    if group:
        for _ in range(2): # TODO why does this have to happen twice?
            try:
                delete = cli_gcp.compute().instanceGroupManagers().delete(project=project, zone=zone, instanceGroupManager=group['name']).execute
                res = retry(delete, times=1000, exponent=1.5, max_seconds=900, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) == 404)()
            except googleapiclient.errors.HttpError as e:
                if getattr(getattr(e, "resp", None), "status", None) != 404:
                    raise
                logging.info(f'already deleted: {group["name"]}')
            else:
                if verbose:
                    logging.info(yaml.dump({group["name"]: res}))
                else:
                    logging.info(f'deleted: {group["name"]}')

    try:
        delete = cli_gcp.compute().instanceTemplates().delete(project=project, instanceTemplate=template_name).execute
        res = retry(delete, times=20, exponent=1.5, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) == 404)()
    except googleapiclient.errors.HttpError as e:
        if getattr(getattr(e, "resp", None), "status", None) != 404:
            raise
        logging.info(f'already deleted: {template_name}')
    else:
        if verbose:
            logging.info(yaml.dump({scaler_name: res}))
        else:
            logging.info(f'deleted: {template_name}')

    if not has_backend and not multiple_groups:
        health_check = f'{lb_name}-health-checks'
        try:
            delete = cli_gcp.compute().healthChecks().delete(project=project, healthCheck=health_check).execute
            res = retry(delete, times=20, exponent=1.5, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) in {404, 400})()
        except googleapiclient.errors.HttpError as e:
            if getattr(getattr(e, "resp", None), "status", None) == 400:
                logging.info(f'in use: {health_check}')
            elif getattr(getattr(e, "resp", None), "status", None) != 404:
                raise
            else:
                logging.info(f'already deleted: {health_check}')
        else:
            logging.info(f'deleted: {health_check}')

        firewall = f'{lb_name}-firewall-allow-health-checks'
        try:
            delete = cli_gcp.compute().firewalls().delete(project=project, firewall=firewall).execute
            res = retry(delete, times=20, exponent=1.5, allowed_exception_fn=lambda e: getattr(getattr(e, "resp", None), "status", None) in {400, 404})()
        except googleapiclient.errors.HttpError as e:
            if getattr(getattr(e, "resp", None), "status", None) == 400:
                logging.info(f'in use: {firewall}')
            elif getattr(getattr(e, "resp", None), "status", None) != 404:
                raise
            else:
                logging.info(f'already deleted: {firewall}')
        else:
            logging.info(f'deleted: {firewall}')

if __name__ == '__main__':
    with cli_gcp.setup():
        argh.dispatch_command(main)
